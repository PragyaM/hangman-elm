var _user$project$Hangman$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$none;
};
var _user$project$Hangman$secretWordLettersDictUpdate = F2(
	function (newVal, maybeVal) {
		var _p0 = maybeVal;
		if (_p0.ctor === 'Nothing') {
			return _elm_lang$core$Maybe$Nothing;
		} else {
			return _elm_lang$core$Maybe$Just(newVal);
		}
	});
var _user$project$Hangman$inputGuess = F2(
	function (guessString, model) {
		var guessLetter = A2(
			_elm_lang$core$Array$get,
			0,
			_elm_lang$core$Array$fromList(
				A2(_elm_lang$core$String$split, '', guessString)));
		return _elm_lang$core$Native_Utils.update(
			model,
			{currentGuessLetter: guessLetter});
	});
var _user$project$Hangman$obfuscatedWord = function (_p1) {
	var _p2 = _p1;
	return _p2.secretWord;
};
var _user$project$Hangman$guessOutcomeOutput = function (model) {
	var _p3 = model.currentGuessOutcome;
	if (_p3.ctor === 'Nothing') {
		return A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{ctor: '[]'});
	} else {
		switch (_p3._0.ctor) {
			case 'Success':
				return A2(
					_elm_lang$html$Html$div,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('Successful guess! HIGH FIVE.'),
						_1: {ctor: '[]'}
					});
			case 'Invalid':
				return A2(
					_elm_lang$html$Html$div,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('That was not a valid guess! Try entering a letter from the alphabet this time, dangus.'),
						_1: {ctor: '[]'}
					});
			case 'Duplicate':
				return A2(
					_elm_lang$html$Html$div,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('You have already guessed that!'),
						_1: {ctor: '[]'}
					});
			default:
				return A2(
					_elm_lang$html$Html$div,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('WRONG! Try again. But also remember that the fate of the gentleman guppy is in your hands.'),
						_1: {ctor: '[]'}
					});
		}
	}
};
var _user$project$Hangman$randomWord = 'Hello';
var _user$project$Hangman$newGame = function (word) {
	var wordDict = _elm_lang$core$Dict$fromList(
		A3(
			_elm_lang$core$List$map2,
			F2(
				function (v0, v1) {
					return {ctor: '_Tuple2', _0: v0, _1: v1};
				}),
			A2(_elm_lang$core$String$split, '', word),
			A2(
				_elm_lang$core$List$repeat,
				_elm_lang$core$String$length(word),
				false)));
	return {
		secretWord: word,
		secretWordLetters: wordDict,
		livesRemaining: 5,
		guessedLetters: {ctor: '[]'},
		currentGuessLetter: _elm_lang$core$Maybe$Nothing,
		currentGuessOutcome: _elm_lang$core$Maybe$Nothing
	};
};
var _user$project$Hangman$init = A2(
	_elm_lang$core$Platform_Cmd_ops['!'],
	_user$project$Hangman$newGame('word'),
	{
		ctor: '::',
		_0: _elm_lang$core$Platform_Cmd$none,
		_1: {ctor: '[]'}
	});
var _user$project$Hangman$Model = F6(
	function (a, b, c, d, e, f) {
		return {secretWord: a, secretWordLetters: b, livesRemaining: c, guessedLetters: d, currentGuessLetter: e, currentGuessOutcome: f};
	});
var _user$project$Hangman$InputGuess = function (a) {
	return {ctor: 'InputGuess', _0: a};
};
var _user$project$Hangman$guessInputField = function (model) {
	return A2(
		_elm_lang$html$Html$form,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$input,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$type_('text'),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$placeholder('Enter guess'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Events$onInput(_user$project$Hangman$InputGuess),
							_1: {ctor: '[]'}
						}
					}
				},
				{ctor: '[]'}),
			_1: {ctor: '[]'}
		});
};
var _user$project$Hangman$Restart = {ctor: 'Restart'};
var _user$project$Hangman$SubmitGuess = {ctor: 'SubmitGuess'};
var _user$project$Hangman$Lost = {ctor: 'Lost'};
var _user$project$Hangman$Won = {ctor: 'Won'};
var _user$project$Hangman$InProgress = {ctor: 'InProgress'};
var _user$project$Hangman$currentGameState = function (model) {
	return A3(
		_elm_lang$core$List$foldr,
		F2(
			function (x, y) {
				return x && y;
			}),
		true,
		_elm_lang$core$Dict$values(model.secretWordLetters)) ? _user$project$Hangman$Won : (_elm_lang$core$Native_Utils.eq(model.livesRemaining, 0) ? _user$project$Hangman$Lost : _user$project$Hangman$InProgress);
};
var _user$project$Hangman$gameStateOutput = function (model) {
	var _p4 = _user$project$Hangman$currentGameState(model);
	switch (_p4.ctor) {
		case 'InProgress':
			return A2(
				_elm_lang$html$Html$div,
				{ctor: '[]'},
				{ctor: '[]'});
		case 'Won':
			return A2(
				_elm_lang$html$Html$div,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('YOU WON!!!!!!!!! Nice.'),
					_1: {ctor: '[]'}
				});
		default:
			return A2(
				_elm_lang$html$Html$div,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('Way to kill the only guy who knew the way to dry land, you dangus.'),
					_1: {ctor: '[]'}
				});
	}
};
var _user$project$Hangman$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$h1,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('Welcome to Hangman'),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(
							A2(
								_elm_lang$core$Basics_ops['++'],
								'Word to guess: ',
								_user$project$Hangman$obfuscatedWord(model))),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(
								A2(
									_elm_lang$core$Basics_ops['++'],
									'Lives remaining: ',
									_elm_lang$core$Basics$toString(model.livesRemaining))),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: _user$project$Hangman$guessInputField(model),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$button,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Events$onClick(_user$project$Hangman$SubmitGuess),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('Submit'),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$div,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text(
											A2(
												_elm_lang$core$Basics_ops['++'],
												'Guessed letters: ',
												_elm_lang$core$Basics$toString(model.guessedLetters))),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: _user$project$Hangman$guessOutcomeOutput(model),
									_1: {
										ctor: '::',
										_0: _user$project$Hangman$gameStateOutput(model),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$button,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Events$onClick(_user$project$Hangman$Restart),
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text('New Game'),
													_1: {ctor: '[]'}
												}),
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					}
				}
			}
		});
};
var _user$project$Hangman$Duplicate = {ctor: 'Duplicate'};
var _user$project$Hangman$Invalid = {ctor: 'Invalid'};
var _user$project$Hangman$Fail = {ctor: 'Fail'};
var _user$project$Hangman$updateLivesRemaining = F2(
	function (livesRemaining, guessOutcome) {
		return _elm_lang$core$Native_Utils.eq(guessOutcome, _user$project$Hangman$Fail) ? (livesRemaining - 1) : livesRemaining;
	});
var _user$project$Hangman$Success = {ctor: 'Success'};
var _user$project$Hangman$outcomeForGuess = F2(
	function (letter, model) {
		return A2(_elm_lang$core$List$member, letter, model.guessedLetters) ? _user$project$Hangman$Duplicate : (A2(_elm_lang$core$Dict$member, letter, model.secretWordLetters) ? _user$project$Hangman$Success : _user$project$Hangman$Fail);
	});
var _user$project$Hangman$submitGuess = function (model) {
	var _p5 = model.currentGuessLetter;
	if (_p5.ctor === 'Nothing') {
		return model;
	} else {
		var _p6 = _p5._0;
		var guessOutcome = A2(_user$project$Hangman$outcomeForGuess, _p6, model);
		return _elm_lang$core$Native_Utils.update(
			model,
			{
				secretWordLetters: A3(
					_elm_lang$core$Dict$update,
					_p6,
					_user$project$Hangman$secretWordLettersDictUpdate(true),
					model.secretWordLetters),
				currentGuessOutcome: _elm_lang$core$Maybe$Just(guessOutcome),
				livesRemaining: A2(
					_user$project$Hangman$updateLivesRemaining,
					model.livesRemaining,
					A2(_user$project$Hangman$outcomeForGuess, _p6, model)),
				guessedLetters: A2(
					_elm_lang$core$Basics_ops['++'],
					model.guessedLetters,
					{
						ctor: '::',
						_0: _p6,
						_1: {ctor: '[]'}
					})
			});
	}
};
var _user$project$Hangman$update = F2(
	function (msg, model) {
		var _p7 = msg;
		switch (_p7.ctor) {
			case 'InputGuess':
				return {
					ctor: '_Tuple2',
					_0: A2(_user$project$Hangman$inputGuess, _p7._0, model),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'SubmitGuess':
				return {
					ctor: '_Tuple2',
					_0: _user$project$Hangman$submitGuess(model),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			default:
				return {
					ctor: '_Tuple2',
					_0: _user$project$Hangman$newGame('waterworld'),
					_1: _elm_lang$core$Platform_Cmd$none
				};
		}
	});
